# vim: foldmethod=marker:foldlevel=0

# get the tmux version for version-specific settings
run-shell "tmux set-environment -g TMUX_VERSION $(( $(tmux -V | cut -d' ' -f2 | cut -d'.' -f1 | sed 's/[^0-9]*//g') * 100 + $(tmux -V | cut -d' ' -f2 | cut -d'.' -f2 | sed 's/[^0-9]*//g') ))"

# Terminal Stuff {{{

# set the default TERM
# use tmux, if available, screen otherwise
set -g default-terminal screen
if-shell 'infocmp tmux' \
    'set -g default-terminal tmux'
# determine if 256 colour support should be enabled/advertised
if-shell "term=${TERM}; [ \${term%256color} != \${term} ] || [ \${term} = 'xterm-kitty' ]" \
    'set -g -a default-terminal -256color'
# Note: This file is sourced when the tmux server starts, so this detection
# will not work if there is already an instance of tmux running.
%if "#{COLORTERM}"
%if "#{<:#{version},3.2}"
set-option -s -a terminal-overrides ",xterm*:Tc"
%else
set-option -s -a terminal-features ",xterm*:RGB"
%endif
%endif

# update the TERM variable within the tmux environment when creating or
# attaching a session
set -g -a update-environment ' TERM'

# make italics work in terminals that support it, but do not use a proper terminfo entry
set -g -a terminal-overrides ',xterm-256color:sitm=\E[3m,ritm=\E[23m'

# use xterm-style function key sequences that include modifiers
# this makes ctrl+left/right work, for instance
set -gw xterm-keys on

# set the title of graphical terminal windows to something sensible
set -g set-titles on
set -g set-titles-string '#T [tmux@#h]'

# }}}

# Prefix Key {{{

# change the prefix to C-a instead of C-b
unbind C-b
# set -g prefix C-a
# bind C-a send-prefix
set -g prefix `
bind ` send-prefix

# }}}

# use vi-style key bindings
set -g status-keys vi
set -gw mode-keys vi

# enable utf8
if-shell "[ #{TMUX_VERSION} -le 201 ]" \
    'set -g utf8 on'
# enable utf8 in the status bar
if-shell "[ #{TMUX_VERSION} -le 201 ]" \
    'set -g status-utf8 on'

# remove mode switching delay in vim and zsh
set -g -s escape-time 1

# decrease the time for additional tmux keys without pressing the prefix key
set -g repeat-time 300

# increase the scrollback buffer size
set -g history-limit 50000

# display tmux messages for 2 seconds
set -g display-time 2000

# start numbering windows and panes from 1
set -g base-index 1
set -g pane-base-index 1

# Mouse Support {{{

# enable mouse support
if-shell "[ #{TMUX_VERSION} -ge 201 ]" \
    'set -g mouse on' \
    'set -gw mode-mouse on'

# make the mouse wheel automatically enter/exit the copy mode
# these bindings scroll the pane the cursor is over, but do not change the focus
if-shell "[ #{TMUX_VERSION} -ge 201 ]" \
    'bind -n WheelUpPane if-shell -F -t= "#{alternate_on}" "send-keys -t= Up" "copy-mode -t= -e; send-keys -t= -M"'
if-shell "[ #{TMUX_VERSION} -ge 201 ]" \
    'bind -n WheelDownPane if-shell -F -t= "#{alternate_on}" "send-keys -t= Down" "send-keys -t= -M"'

# }}}

# Status Line and General Theming {{{

# highlight active windows in the status line
set -gw monitor-activity on

# status line content
set -g status-left "[#{?client_prefix,#[fg=#dfdf00],#[fg=#00af00]}#S#[default]]"
# right side: current command, hostname (if remote), load graphs
set -g status-right '#[fg=#ff8700]#{pane_current_command}#[default]'
set -g -a status-right '#(tmux showenv SSH_CONNECTION | grep -xFq -- "-SSH_CONNECTION" || echo " [#[fg=brightyellow]#h#[default]]")'
if-shell 'command -v system-graph.py > /dev/null' \
    'set -g -a status-right "#(system-graph.py --format=\" #[fg=#dfdf00]{mem[0]}#[fg=#ff8700]{swap[0]}#[fg=#df0000]{cpu[0]}#[fg=#af00af]{loadavg[0].1}{loadavg[0].5}{loadavg[0].15}#[fg=#00af00]{net[0].rx}{net[0].tx}\")"'

# refresh the status line every 5 seconds
set -g status-interval 5

# set -g message-command-style "fg=yellow,bg=black" # entering commands, "command mode"
# set -g message-style "fg=black,bg=yellow" # entering commands, "insert mode"
# set -g pane-active-border-style "fg=green"
set -g pane-border-style "fg=#3c3836"
# set -g status-left-style default
# set -g status-right-style default
set -g status-style "bg=#1d2021,fg=#ebdbb2"
# set -gw mode-style "fg=black,bg=yellow"
set -gw window-status-activity-style "fg=#fabd2f" # yellow fg
set -gw window-status-bell-style "fg=#d3869b" # purple fg
set -gw window-status-current-style "bg=#3c3836" # lighter bg
set -gw window-status-last-style "fg=#b8bb26" # green fg
# set -gw window-status-style default

# set -gw window-status-current-format "#I:#W#F"
# set -gw window-status-format "#I:#W#F"

# }}}

# Window and Pane Management {{{

# create new windows in the current working directory
bind c new-window -c "#{pane_current_path}"

# splitting windows
bind v split-window -h -c "#{pane_current_path}"
bind s split-window -v -c "#{pane_current_path}"

# joining a pane from another window into the current window
bind '"' if-shell "tmux list-panes -a -F '##F' | grep -Fq 'M'" "join-pane" "split-window ; choose-window 'kill-pane ; join-pane -s %%'"

# moving between panes with vim movement keys
bind -r h select-pane -L
bind -r j select-pane -D
bind -r k select-pane -U
bind -r l select-pane -R

# moving between windows with t/T
unbind n
unbind p
bind T previous-window
bind t next-window

# resizing panes similar to vim
bind -r < resize-pane -L 5
bind -r > resize-pane -R 5
bind -r - resize-pane -D 5
bind -r + resize-pane -U 5
bind -r H resize-pane -L 5
bind -r L resize-pane -R 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5

# }}}

# Copy Mode {{{

# enter the copy-mode with ESC
bind Escape copy-mode

# vim-like copy-mode bindings

if-shell "[ #{TMUX_VERSION} -lt 204 ]" \
    'bind -t vi-copy v begin-selection' \
    'bind -T copy-mode-vi v send -X begin-selection'
if-shell "[ #{TMUX_VERSION} -lt 204 ]" \
    'bind -t vi-copy C-v rectangle-toggle' \
    'bind -T copy-mode-vi C-v send -X rectangle-toggle'
if-shell "[ #{TMUX_VERSION} -lt 204 ]" \
    'bind -t vi-copy y copy-selection' \
    'bind -T copy-mode-vi y send -X copy-selection'
if-shell "[ #{TMUX_VERSION} -lt 204 ]" \
    'bind -t vi-copy Home start-of-line' \
    'bind -T copy-mode-vi Home send -X start-of-line'
if-shell "[ #{TMUX_VERSION} -lt 204 ]" \
    'bind -t vi-copy End end-of-line' \
    'bind -T copy-mode-vi End send -X end-of-line'
if-shell "[ #{TMUX_VERSION} -lt 204 ]" \
    'bind -t vi-copy H start-of-line' \
    'bind -T copy-mode-vi H send -X start-of-line'
if-shell "[ #{TMUX_VERSION} -lt 204 ]" \
    'bind -t vi-copy L end-of-line' \
    'bind -T copy-mode-vi L send -X end-of-line'

# }}}

# X11 Clipboard Support {{{

# check what command is available for interaction with the X11 selection
if-shell 'command -v putclip >/dev/null 2>/dev/null' \
    'set-environment -g copy_command "putclip"'
if-shell 'command -v getclip >/dev/null 2>/dev/null' \
    'set-environment -g paste_command "getclip"'
if-shell 'command -v xsel >/dev/null 2>/dev/null' \
    'set-environment -g copy_command "xsel -i --primary"'
if-shell 'command -v xsel >/dev/null 2>/dev/null' \
    'set-environment -g paste_command "xsel -o --primary"'
if-shell 'command -v xclip >/dev/null 2>/dev/null' \
    'set-environment -g copy_command "xclip -i -selection primary > /dev/null"'
if-shell 'command -v xclip >/dev/null 2>/dev/null' \
    'set-environment -g paste_command "xclip -o -selection primary"'

# in copy mode:
# y - copy selection to X11
# p - copy selection into the pane
if-shell '[ -n "${copy_command}" ] && [ #{TMUX_VERSION} -lt 204 ]' \
    'bind -t vi-copy y copy-pipe "${copy_command}"'
if-shell '[ -n "${copy_command}" ] && [ #{TMUX_VERSION} -ge 204 ]' \
    'bind -T copy-mode-vi y send -X copy-pipe "${copy_command}"'
if-shell "[ #{TMUX_VERSION} -lt 204 ]" \
    'bind -t vi-copy p copy-pipe "tmux paste-buffer"' \
    'bind -T copy-mode-vi p send -X copy-pipe "tmux paste-buffer"' \
# TODO: copy to X11 using the mouse, not supported by tmux as of 2.1
# if-shell '[ -n "${copy_command}" ]' 'bind -t vi-copy MouseDrag1Pane copy-pipe ${copy_command}'

# in normal mode:
# Y - copy the current path to the X11 selection
# p - paste the X11 selection or the most recent tmux buffer
# P - choose a tmux buffer and paste its contents
if-shell '[ -n "${copy_command}" ]' \
    'bind Y run-shell "tmux display-message -p -F \"#{pane_current_path}\" | tr -d \"\n\" | $copy_command"'
bind p paste-buffer
if-shell '[ -n "${paste_command}" ]' \
    'bind p run-shell "tmux set-buffer -b X11 -- \"$(${paste_command})\" && tmux paste-buffer -b X11"'
bind P choose-buffer

# paste the X11 selection with the middle mouse button
if-shell '[ #{TMUX_VERSION} -ge 201 ] && [ -n "${paste_command}" ]' \
    'bind -n MouseDown2Pane run-shell "tmux set-buffer -b X11 -- \"$(${paste_command})\" && tmux paste-buffer -b X11"'

set-environment -g -u copy_command
set-environment -g -u paste_command

# }}}

# export the current buffer to a file with e
# (or E, including escape sequences)
bind e command-prompt -I 'tmux-#{session_name}:#{window_index}.#{pane_index}-%Y%m%d.txt' -p 'export-buffer:' "capture-pane -S -65535 ; save-buffer -a '%%' ; delete-buffer"
bind E command-prompt -I 'tmux-#{session_name}:#{window_index}.#{pane_index}-%Y%m%d.log' -p 'export-buffer:' "capture-pane -e -S -65535 ; save-buffer -a '%%' ; delete-buffer"

if-shell '[ -f ~/.tmux.conf.local ]' \
    'source ~/.tmux.conf.local'
